package bloodtestscheduler;

import javax.swing.JOptionPane;


/**
 *
 * @author saboteur
 */
public class GUI extends javax.swing.JFrame {

    public GUI() {
        initComponents();
    }
    
    private void updateQueueTable() { // update table when changes are made
        javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) queueTable.getModel();
        model.setRowCount(0);
        
        // loop thru elements and add to table
        for (Patient p : Patient.queue) { // Directly using staic queue 
                model.addRow(new Object[]{p.getName(),p.getGender(), p.getAge(), p.getPriority(), p.isFromHospital() ? "Yes" : "No", p.getAssignedGP()});
                
        }
    }
    
    private void showNoShowList() {
        String noShowText = "No-Show Patients:\n"; 
        
        // looping through no show list
        for (Patient p : Patient.noShowList) {
            noShowText += p.getName() + "\n";
        }
        
        JOptionPane.showMessageDialog(this, noShowText, "No-Show List", JOptionPane.INFORMATION_MESSAGE); // pop-up this message
    }

    private void showGPDetails() { 
        GP[] gpList = GP.getGPList(); // Retrieve the GP list 
        String gpDetails = "List of General Practitioners:\n\n";

        // Loop through GP list
        for (GP gp : gpList) {
            gpDetails += "Name: " + gp.getName() + "\n";
            gpDetails += "Age: " + gp.getAge() + "\n";
            gpDetails += "Gender: " + gp.getGender() + "\n";
            gpDetails += "Specialization: " + gp.getSpecialization() + "\n";
            gpDetails += "----------------------------\n";
        }

        // Display the GP details in a pop-up 
        JOptionPane.showMessageDialog(this, gpDetails, "GP Details", JOptionPane.INFORMATION_MESSAGE);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        title = new javax.swing.JLabel();
        nameLabel = new javax.swing.JLabel();
        ageLabel = new javax.swing.JLabel();
        priorityLabel = new javax.swing.JLabel();
        priorityList = new javax.swing.JComboBox<>();
        nameField = new javax.swing.JTextField();
        ageField = new javax.swing.JTextField();
        patientCheckLabel = new javax.swing.JLabel();
        patientCheck = new javax.swing.JCheckBox();
        seperator = new javax.swing.JSeparator();
        addBTN = new javax.swing.JButton();
        nextBTN = new javax.swing.JButton();
        noShowBTN = new javax.swing.JButton();
        queueScrollPane = new javax.swing.JScrollPane();
        queueTable = new javax.swing.JTable();
        GPLabel = new javax.swing.JLabel();
        gpList = new javax.swing.JComboBox<>();
        quitBTN = new javax.swing.JToggleButton();
        clearBTN = new javax.swing.JToggleButton();
        genderLabel = new javax.swing.JLabel();
        genderList = new javax.swing.JComboBox<>();
        gpBTN = new javax.swing.JToggleButton();

        jLabel4.setText("Priority:");

        jButton3.setText("Add Patient");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        title.setFont(new java.awt.Font("Lucida Grande", 0, 13)); // NOI18N
        title.setText("Blood Test Scheduler");
        title.setSize(new java.awt.Dimension(60, 50));

        nameLabel.setText("Name:");

        ageLabel.setText("Age:");

        priorityLabel.setText("Priority:");

        priorityList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Urgent", "Medium", "Low" }));
        priorityList.setSelectedIndex(2);
        priorityList.setToolTipText("");
        priorityList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priorityListActionPerformed(evt);
            }
        });

        nameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameFieldActionPerformed(evt);
            }
        });

        ageField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ageFieldActionPerformed(evt);
            }
        });

        patientCheckLabel.setText("Hospital Patient?");

        patientCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientCheckActionPerformed(evt);
            }
        });

        addBTN.setBackground(java.awt.Color.green);
        addBTN.setForeground(java.awt.Color.black);
        addBTN.setText("Add Patient");
        addBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBTNActionPerformed(evt);
            }
        });

        nextBTN.setBackground(java.awt.Color.blue);
        nextBTN.setText("Process Next");
        nextBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextBTNActionPerformed(evt);
            }
        });

        noShowBTN.setBackground(java.awt.Color.red);
        noShowBTN.setText("Mark a No-Show");
        noShowBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noShowBTNActionPerformed(evt);
            }
        });

        queueTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Name", "Gender", "Age", "Priority", "Hospital", "GP Assigned"
            }
        ));
        queueScrollPane.setViewportView(queueTable);

        GPLabel.setText("Assign GP:");

        gpList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "- None -", "Dr. Smith", "Dr. Johnson", "Dr.Lee", "Dr.Patel", "Dr.Adams" }));

        quitBTN.setText("Quit This App");
        quitBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitBTNActionPerformed(evt);
            }
        });

        clearBTN.setText("Clear Entire Table");
        clearBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearBTNActionPerformed(evt);
            }
        });

        genderLabel.setText("Gender:");

        genderList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-Select -", "Male", "Female", "Other" }));
        genderList.setToolTipText("");
        genderList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genderListActionPerformed(evt);
            }
        });

        gpBTN.setText("List GP Details");
        gpBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gpBTNActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(75, 75, 75)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(160, 160, 160)
                        .addComponent(title)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(quitBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, Short.MAX_VALUE)
                                .addComponent(gpBTN)
                                .addGap(18, 18, 18)
                                .addComponent(clearBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(queueScrollPane, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(addBTN)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(nextBTN)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(noShowBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(nameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 44, Short.MAX_VALUE)
                                            .addComponent(ageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGap(26, 26, 26)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(ageField, javax.swing.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE)
                                            .addComponent(nameField)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(GPLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(gpList, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(priorityLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(priorityList, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(patientCheckLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(patientCheck))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(genderLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(24, 24, 24)
                                        .addComponent(genderList, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(seperator))
                        .addGap(75, 75, 75))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(title)
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameLabel)
                    .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(genderLabel)
                    .addComponent(genderList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(ageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(ageField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(patientCheckLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(patientCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(priorityLabel)
                    .addComponent(priorityList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(GPLabel)
                    .addComponent(gpList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(seperator, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(noShowBTN)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(addBTN)
                        .addComponent(nextBTN)))
                .addGap(30, 30, 30)
                .addComponent(queueScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(quitBTN)
                    .addComponent(clearBTN)
                    .addComponent(gpBTN)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void patientCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientCheckActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_patientCheckActionPerformed

    private void ageFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ageFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ageFieldActionPerformed

    private void nameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameFieldActionPerformed

    private void addBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBTNActionPerformed
        String name = nameField.getText();
        int age;

        try { // age validaiton and parsing
            age = Integer.parseInt(ageField.getText());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid age. Please enter a number.");
            return;
        }
        
        for (Patient p : Patient.queue) {
            if (p.getName().equalsIgnoreCase(name)) {
                JOptionPane.showMessageDialog(this, "This patient is already in the queue.");
                return;
            }
        }
        
        String gender = (String) genderList.getSelectedItem();
        String priority = (String) priorityList.getSelectedItem();// get priorty from dropdown
        boolean fromHospital = patientCheck.isSelected(); // checkbox status
        String assignedGP = (String) gpList.getSelectedItem(); 

        Patient.addPatient(new Patient(fromHospital, name, age, priority, gender, assignedGP));
        updateQueueTable(); // add to table
        
        // clear input fields after addition
        nameField.setText("");
        ageField.setText("");
        genderList.setSelectedIndex(0);
        priorityList.setSelectedIndex(2);
        gpList.setSelectedIndex(0);
        patientCheck.setSelected(false); // uncheck the box
    }//GEN-LAST:event_addBTNActionPerformed

    private void nextBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextBTNActionPerformed
        Patient next = Patient.getNextPatient(); //get next patient from queue
        if (next != null) {
            JOptionPane.showMessageDialog(this, "Processing: " + next.getName() + next.getPriority() + next.getAssignedGP() ); 
        } else {
            JOptionPane.showMessageDialog(this, "No patients in queue."); // if table is empty
        }
        updateQueueTable();
    }//GEN-LAST:event_nextBTNActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void noShowBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noShowBTNActionPerformed
        String name = JOptionPane.showInputDialog(this, "Enter name of no-show:");
        if (name != null && !name.isEmpty()) {
            Patient.markNoShow(new Patient(false, name, 0, "Low","Other", "None")); // Assign default GP
            JOptionPane.showMessageDialog(this, name + " marked as no-show.");
        }

        // Show the no-show list after marking one
        showNoShowList();
    }//GEN-LAST:event_noShowBTNActionPerformed

    private void priorityListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priorityListActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_priorityListActionPerformed

    private void quitBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitBTNActionPerformed
        System.exit(0); // quit the app
    }//GEN-LAST:event_quitBTNActionPerformed

    private void clearBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearBTNActionPerformed
        Patient.queue.clear();
        updateQueueTable(); // clear entire table
    }//GEN-LAST:event_clearBTNActionPerformed

    private void genderListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genderListActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_genderListActionPerformed

    private void gpBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gpBTNActionPerformed
        showGPDetails();
    }//GEN-LAST:event_gpBTNActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel GPLabel;
    private javax.swing.JButton addBTN;
    private javax.swing.JTextField ageField;
    private javax.swing.JLabel ageLabel;
    private javax.swing.JToggleButton clearBTN;
    private javax.swing.JLabel genderLabel;
    private javax.swing.JComboBox<String> genderList;
    private javax.swing.JToggleButton gpBTN;
    private javax.swing.JComboBox<String> gpList;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField nameField;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JButton nextBTN;
    private javax.swing.JButton noShowBTN;
    private javax.swing.JCheckBox patientCheck;
    private javax.swing.JLabel patientCheckLabel;
    private javax.swing.JLabel priorityLabel;
    private javax.swing.JComboBox<String> priorityList;
    private javax.swing.JScrollPane queueScrollPane;
    private javax.swing.JTable queueTable;
    private javax.swing.JToggleButton quitBTN;
    private javax.swing.JSeparator seperator;
    private javax.swing.JLabel title;
    // End of variables declaration//GEN-END:variables
}
