package bloodtestscheduler;

import javax.swing.JOptionPane;


/**
 *
 * @author saboteur
 */

public class GUI extends javax.swing.JFrame {

    public GUI() {
        initComponents();
    }
    
    public void updateQueueTable() { // update table when changes are made
        javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) queueTable.getModel();
        model.setRowCount(0); // Clears table before adding new elements to avoid duplicates
        
        // loop thru the patietns queue and add them to the table
        for (Patient p : Patient.queue) { // Directly using staic queue 
                model.addRow(new Object[]{ // adds patient to the table with the below mentioned details
                    p.getName(),
                    p.getGender(), 
                    p.getAge(), 
                    p.getPriority(), 
                    p.isFromHospital() ? "Yes" : "No", 
                    p.getAssignedGP()
                });              
        }
        
        System.out.println("Table updated"); // terminal system confirmation
    }
    
    private void showNoShowList() { 
        System.out.println("No show list loaded"); // terminal system confirmation

        String noShowText = "No-Show Patients:\n"; 
        
        if (Patient.noShowList.isEmpty()){
            noShowText += "\nNobody here, Everyone showed up!";
        } else {
            // looping through no show list
            for (Patient p : Patient.noShowList) { // listing the following details of the no show patients
                noShowText += "Name: " + p.getName() + "; ";
                noShowText += "Age: " + p.getAge() + "; ";
                noShowText += "GP: " + p.getAssignedGP() + "\n";
            }
        }
        
        JOptionPane.showMessageDialog(this, noShowText, "No-Show List", JOptionPane.INFORMATION_MESSAGE); // pop-up this message        
    }
    
    private void showGPDetails() { 
        System.out.println("GP Details Loaded"); // terminal system confirmation

        GP[] gpList = GP.getGPList(); // Retrieve the GP list 
        String gpDetails = "List of General Practitioners:\n\n";

        // Loop through GP list
        for (GP gp : gpList) {
            gpDetails += "Name: " + gp.getName() + "\n";
            gpDetails += "Age: " + gp.getAge() + "\n";
            gpDetails += "Gender: " + gp.getGender() + "\n";
            gpDetails += "Specialization: " + gp.getSpecialization() + "\n";
            gpDetails += "----------------------------\n";
        }

        // Display all the above GP details in a pop-up pane
        JOptionPane.showMessageDialog(this, gpDetails, "GP Details", JOptionPane.INFORMATION_MESSAGE);
        
    }
    
    private void processNextPatient() { // this was initially not a recurrsive, but was in the nextBTN function
        Patient next = Patient.getNextPatient(); //get next patient from queue

        if (next == null) { // to check if the queue is empty
            JOptionPane.showMessageDialog(this, "No patients in queue."); // if true then show it is empty
            return; // exit function
        }

        // ask the user if they want to either confirm processing or mark the patient as a no show
        String[] options = {"Mark No-Show", "Process Patient"}; // initially i had this as a yes or no dialog box, but i've changed to make the processing easy and clear
        int choice = JOptionPane.showOptionDialog(
            this,
            "Name: " + next.getName() + "\nAge: " + next.getAge() + ";" + " Priority: " + next.getPriority() + "\nGP: " + next.getAssignedGP(),
            "Now Processing", // displays the necessary details on processing
            JOptionPane.DEFAULT_OPTION,
            JOptionPane.QUESTION_MESSAGE,
            null,
            options,
            options[1] // Default selected button is "Process Patient", as when enter is clicked, they are automatically marked as processed
        );

        if (choice == 0) { // if its a no show, then the patient is added to the no show list
            Patient.markNoShow(next); // Mark as no-show
            JOptionPane.showMessageDialog(this, next.getName() + " marked as no-show.");
            System.out.println("No Show added"); // terminal system confirmation
        } else { // else, confirms with the processing and add them to the history list
            Patient.saveToHistory(next);
            JOptionPane.showMessageDialog(this, next.getName() + " has been processed.");
            System.out.println("Processed"); // terminal system confirmation
        }
            
        updateQueueTable(); // updating table to reflect the processing
    }    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        title = new javax.swing.JLabel();
        nameLabel = new javax.swing.JLabel();
        ageLabel = new javax.swing.JLabel();
        priorityLabel = new javax.swing.JLabel();
        priorityList = new javax.swing.JComboBox<>();
        nameField = new javax.swing.JTextField();
        patientCheckLabel = new javax.swing.JLabel();
        patientCheck = new javax.swing.JCheckBox();
        seperator = new javax.swing.JSeparator();
        addBTN = new javax.swing.JButton();
        nextBTN = new javax.swing.JButton();
        noShowBTN = new javax.swing.JButton();
        queueScrollPane = new javax.swing.JScrollPane();
        queueTable = new javax.swing.JTable();
        GPLabel = new javax.swing.JLabel();
        gpList = new javax.swing.JComboBox<>();
        quitBTN = new javax.swing.JToggleButton();
        clearBTN = new javax.swing.JToggleButton();
        genderLabel = new javax.swing.JLabel();
        genderList = new javax.swing.JComboBox<>();
        gpBTN = new javax.swing.JToggleButton();
        helpBTN = new javax.swing.JToggleButton();
        ageSpinner = new javax.swing.JSpinner();
        historyBTN = new javax.swing.JButton();

        jLabel4.setText("Priority:");

        jButton3.setText("Add Patient");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        title.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        title.setText("Blood Test Scheduler");
        title.setSize(new java.awt.Dimension(60, 50));

        nameLabel.setText("Full Name:");

        ageLabel.setText("Age:");

        priorityLabel.setText("Priority:");

        priorityList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Urgent", "Medium", "Low" }));
        priorityList.setSelectedIndex(2);
        priorityList.setToolTipText("");
        priorityList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priorityListActionPerformed(evt);
            }
        });

        nameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameFieldActionPerformed(evt);
            }
        });

        patientCheckLabel.setText("From a Hospital Ward?");

        patientCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientCheckActionPerformed(evt);
            }
        });

        addBTN.setBackground(java.awt.Color.green);
        addBTN.setForeground(java.awt.Color.black);
        addBTN.setText("Add Patient");
        addBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBTNActionPerformed(evt);
            }
        });

        nextBTN.setBackground(java.awt.Color.blue);
        nextBTN.setText("Process Next");
        nextBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextBTNActionPerformed(evt);
            }
        });

        noShowBTN.setBackground(java.awt.Color.red);
        noShowBTN.setText("No-Shows");
        noShowBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noShowBTNActionPerformed(evt);
            }
        });

        queueTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Gender", "Age", "Priority", "Hospital", "GP Assigned"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        queueTable.getTableHeader().setReorderingAllowed(false);
        queueScrollPane.setViewportView(queueTable);

        GPLabel.setText("Assign GP:");

        gpList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "- None -", "Dr. Smith (Cardiology)", "Dr. Johnson (Neurology)", "Dr.Lee (Pediatrics)", "Dr.Patel (General Practice)", "Dr.Adams (Orthopedics)" }));

        quitBTN.setText("Quit");
        quitBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitBTNActionPerformed(evt);
            }
        });

        clearBTN.setText("Clear Patient Queue");
        clearBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearBTNActionPerformed(evt);
            }
        });

        genderLabel.setText("Gender:");

        genderList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "- Select -", "Male", "Female", "Other" }));
        genderList.setToolTipText("");
        genderList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genderListActionPerformed(evt);
            }
        });

        gpBTN.setText("Show GP Details");
        gpBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gpBTNActionPerformed(evt);
            }
        });

        helpBTN.setText("Help");
        helpBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpBTNActionPerformed(evt);
            }
        });

        historyBTN.setText("Patients Log");
        historyBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                historyBTNActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(quitBTN)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(helpBTN))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(gpBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(historyBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(clearBTN))
                    .addComponent(queueScrollPane, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 474, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(nextBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(noShowBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(seperator)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(GPLabel)
                                    .addComponent(genderLabel))
                                .addGap(12, 12, 12)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(genderList, 0, 153, Short.MAX_VALUE)
                                    .addComponent(gpList, 0, 1, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(nameLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(patientCheckLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(patientCheck))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(priorityLabel)
                                    .addComponent(ageLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(priorityList, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ageSpinner, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addGap(23, 23, 23))
            .addGroup(layout.createSequentialGroup()
                .addGap(133, 133, 133)
                .addComponent(title)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(quitBTN)
                    .addComponent(helpBTN))
                .addGap(3, 3, 3)
                .addComponent(title)
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameLabel)
                    .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ageSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(priorityLabel)
                    .addComponent(priorityList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(genderList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(genderLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(patientCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(patientCheckLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(GPLabel)
                        .addComponent(gpList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(seperator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addBTN)
                    .addComponent(nextBTN)
                    .addComponent(noShowBTN))
                .addGap(30, 30, 30)
                .addComponent(queueScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clearBTN)
                    .addComponent(gpBTN)
                    .addComponent(historyBTN)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void patientCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientCheckActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_patientCheckActionPerformed

    private void nameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameFieldActionPerformed

    private void addBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBTNActionPerformed
        String name = nameField.getText(); // retrieves the name from input field
        String gender = (String) genderList.getSelectedItem(); // gets the gender of the person
        String priority = (String) priorityList.getSelectedItem();// get priorty from dropdown
        boolean fromHospital = patientCheck.isSelected(); // checkbox status
        String assignedGP = (String) gpList.getSelectedItem(); // retreives the assigned GP
        int age = (int) ageSpinner.getValue(); // since it now directly gets a number, parsing is no longer required
        
        // checks if name field is empty
        if (name.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter a name.");
            return;
        }
        
        if (age == 00) { // checking if age is not 0
            JOptionPane.showMessageDialog(this, "Please enter a valid age.");
            return;
        }
        if (genderList.getSelectedIndex() == 0){ // checking if gender field is empty
            JOptionPane.showMessageDialog(this, "Please select a gender (Male, Female or Other)");
            return;
        }
        
        if (assignedGP.equals("- None -")) { // doesn't warn the user, this is rather to make the queue table look more organized
            assignedGP = "None"; 
        }
        
        for (Patient p : Patient.queue) { // looping throught the queue to check if this patient exists or not
            if (p.getName().equalsIgnoreCase(name) && 
            p.getAge() == age && 
            p.getGender().equalsIgnoreCase(gender) &&
            p.getPriority().equalsIgnoreCase(priority) &&
            p.isFromHospital() == fromHospital &&
            p.getAssignedGP().equalsIgnoreCase(assignedGP)){ // now it checks if all elements are same, earlier it only checks for name and now the chances of having a patient with all these fields same is highly unlikely
                
                JOptionPane.showMessageDialog(this, "This patient is already in the queue.");
                return;
            }
        }      

        Patient.addPatient(new Patient(fromHospital, name, age, priority, gender, assignedGP)); // creating the patient object and add them to the table
        updateQueueTable(); // refreshing the table to show the addition made, live
        System.out.println("Patient Added.");// terminal system confirmation
        
        // clear input fields after addition
        nameField.setText("");
        ageSpinner.setValue(age);
        genderList.setSelectedIndex(0); // resetting the dropdowns
        priorityList.setSelectedIndex(2);
        gpList.setSelectedIndex(0);
        patientCheck.setSelected(false); // uncheck the box
    }//GEN-LAST:event_addBTNActionPerformed

    private void nextBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextBTNActionPerformed
        processNextPatient();
    }//GEN-LAST:event_nextBTNActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void noShowBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noShowBTNActionPerformed
        // Show the no-show list
        showNoShowList();
    }//GEN-LAST:event_noShowBTNActionPerformed

    private void priorityListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priorityListActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_priorityListActionPerformed

    private void quitBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitBTNActionPerformed
        System.out.println("Quiting.....\n"); // terminal system confirmation
        System.out.println("GoodBye!\n"); // terminal system confirmation
        
        System.exit(0); // quit the app
    }//GEN-LAST:event_quitBTNActionPerformed

    private void clearBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearBTNActionPerformed
        Patient.queue.clear(); // clear entire table, to restart or test purposes
        updateQueueTable(); // reflecting these changes
        
        System.out.println("Table Cleared"); // terminal system confirmation
    }//GEN-LAST:event_clearBTNActionPerformed

    private void genderListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genderListActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_genderListActionPerformed

    private void gpBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gpBTNActionPerformed
        showGPDetails(); // shows the details of all the GPs
    }//GEN-LAST:event_gpBTNActionPerformed

    private void helpBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpBTNActionPerformed
        Help.showHelp();
    }//GEN-LAST:event_helpBTNActionPerformed

    private void historyBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_historyBTNActionPerformed
        System.out.println("History/Log loaded"); // terminal system confirmation
        
        String history = Patient.getPatientHistory(); // this is to retreive the patient history from the list 
        
        if (history.equals("No patient history available.")) { // If there is no history found then display an alert
            JOptionPane.showMessageDialog(this, history, "Patient History", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        
        String[] options = {"Clear All", "Close"};
        int choice = JOptionPane.showOptionDialog( // this is the exact same as the process patient pane, it follows the same order
            this,
            history, 
            "Patient History", 
            JOptionPane.DEFAULT_OPTION, 
            JOptionPane.INFORMATION_MESSAGE, 
            null, 
            options, 
            options[1] 
        );

        if (choice == 0) { // clear the queue if the user chooses to
            Patient.clearPatientHistory(); 
            JOptionPane.showMessageDialog(this, "All patient history has been cleared.");
            
            System.out.println("History cleared"); // terminal system confirmation
        }
    }//GEN-LAST:event_historyBTNActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel GPLabel;
    private javax.swing.JButton addBTN;
    private javax.swing.JLabel ageLabel;
    private javax.swing.JSpinner ageSpinner;
    private javax.swing.JToggleButton clearBTN;
    private javax.swing.JLabel genderLabel;
    private javax.swing.JComboBox<String> genderList;
    private javax.swing.JToggleButton gpBTN;
    private javax.swing.JComboBox<String> gpList;
    private javax.swing.JToggleButton helpBTN;
    private javax.swing.JButton historyBTN;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField nameField;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JButton nextBTN;
    private javax.swing.JButton noShowBTN;
    private javax.swing.JCheckBox patientCheck;
    private javax.swing.JLabel patientCheckLabel;
    private javax.swing.JLabel priorityLabel;
    private javax.swing.JComboBox<String> priorityList;
    private javax.swing.JScrollPane queueScrollPane;
    private javax.swing.JTable queueTable;
    private javax.swing.JToggleButton quitBTN;
    private javax.swing.JSeparator seperator;
    private javax.swing.JLabel title;
    // End of variables declaration//GEN-END:variables
}
